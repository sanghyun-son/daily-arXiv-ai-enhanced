# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: arXiv-daily-ai-enhanced

on:
  schedule:
    - cron: "30 16 * * *"
  workflow_dispatch:


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv sync
        
    - name: Crawl arXiv papers
      id: crawl_step
      run: |
        source .venv/bin/activate
        today=$(date -u "+%Y-%m-%d")
        echo "Starting to crawl $today arXiv papers..."
        
        # Check if today's file exists, delete if found
        if [ -f "data/${today}.jsonl" ]; then
            echo "üóëÔ∏è Found existing today's file, deleting for fresh start..."
            rm "data/${today}.jsonl"
            echo "‚úÖ Deleted existing file: data/${today}.jsonl"
        else
            echo "üìù Today's file doesn't exist, ready to create new one..."
        fi
        
        cd daily_arxiv
        export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        export OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
        export LANGUAGE="${{ vars.LANGUAGE }}"
        export CATEGORIES="${{ vars.CATEGORIES }}"
        export MODEL_NAME="${{ vars.MODEL_NAME }}"
        
        # Use Scrapy to crawl
        scrapy crawl arxiv -o ../data/${today}.jsonl
        
        # Check if crawling was successful
        if [ ! -f "../data/${today}.jsonl" ]; then
            echo "Crawling failed, no data file generated"
            exit 1
        fi
        
        echo "crawl_date=$today" >> $GITHUB_OUTPUT
        echo "Crawling completed"
        
    - name: Check for duplicates
      id: dedup_check
      run: |
        source .venv/bin/activate
        echo "Performing intelligent deduplication check..."
        
        cd daily_arxiv
        # Execute intelligent deduplication check script
        set +e  # Temporarily allow command failure
        python daily_arxiv/check_stats.py
        
        # Get exit code
        dedup_exit_code=$?
        set -e  # Restore strict mode
        
        echo "Dedup check exit code: $dedup_exit_code"
        echo "dedup_exit_code=$dedup_exit_code" >> $GITHUB_OUTPUT
        
        case $dedup_exit_code in
            0)
                echo "has_new_content=true" >> $GITHUB_OUTPUT
                ;;
            1)
                echo "has_new_content=false" >> $GITHUB_OUTPUT
                echo "skip_reason=no_new_content" >> $GITHUB_OUTPUT
                ;;
            2)
                echo "has_new_content=false" >> $GITHUB_OUTPUT
                echo "skip_reason=processing_error" >> $GITHUB_OUTPUT
                exit 1
                ;;
            *)
                echo "‚ùå Unknown exit code, stop workflow"
                echo "has_new_content=false" >> $GITHUB_OUTPUT
                echo "skip_reason=unknown_error" >> $GITHUB_OUTPUT
                exit 1
                ;;
        esac
        
    - name: AI Enhancement Processing
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        source .venv/bin/activate
        today=${{ steps.crawl_step.outputs.crawl_date }}
        echo "Starting AI enhancement processing..."
        
        cd ai
        export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        export OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
        export LANGUAGE="${{ vars.LANGUAGE }}"
        export MODEL_NAME="${{ vars.MODEL_NAME }}"
        
        python enhance.py --data ../data/${today}.jsonl
        
        # Check if AI processing was successful
        if [ $? -ne 0 ]; then
            echo "AI processing failed"
            exit 1
        fi
        echo "AI enhancement processing completed"
        
    - name: Convert to Markdown
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        source .venv/bin/activate
        today=${{ steps.crawl_step.outputs.crawl_date }}
        echo "Converting to Markdown format..."
        
        # Set environment variables
        export LANGUAGE="${{ vars.LANGUAGE }}"
        
        cd to_md
        
        # Use AI enhanced file for conversion
        AI_FILE="../data/${today}_AI_enhanced_${LANGUAGE}.jsonl"
        
        if [ -f "$AI_FILE" ]; then
            echo "Using AI enhanced file for conversion..."
            python convert.py --data "$AI_FILE"
        else
            echo "Error: AI enhanced file not found"
            echo "AI file: $AI_FILE"
            exit 1
        fi
        
        # Check if conversion was successful
        if [ $? -ne 0 ]; then
            echo "Markdown conversion failed"
            exit 1
        fi
        echo "Markdown conversion completed"
        
    - name: Update file list
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        echo "Updating file list..."
        ls data/*.jsonl | sed 's|data/||' > assets/file-list.txt
        echo "File list updated"
        
    - name: Summary
      run: |
        if [ "${{ steps.dedup_check.outputs.has_new_content }}" = "true" ]; then
          echo "‚úÖ Workflow completed: Smart deduplication found new content and processed successfully"
        else
          case "${{ steps.dedup_check.outputs.skip_reason }}" in
            "no_new_content")
              echo "‚ÑπÔ∏è Workflow completed: No new content after smart deduplication"
              ;;
            "processing_error")
              echo "‚ö†Ô∏è Workflow completed: Deduplication processing error"
              ;;
            "unknown_error")
              echo "‚ö†Ô∏è Workflow completed: Unknown error"
              ;;
            *)
              echo "‚ÑπÔ∏è Workflow completed: Skipped for unknown reason"
              ;;
          esac
        fi
        
    - name: Commit changes
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        git config --global user.email "${{ vars.EMAIL }}"
        git config --global user.name "${{ vars.NAME }}"
        git add .
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        git commit -m "update: $(date -u '+%Y-%m-%d') arXiv papers"
        echo "Changes committed"
        
    - name: Pull latest changes and push
      if: steps.dedup_check.outputs.has_new_content == 'true'
      run: |
        # Set Git config for automatic merging
        git config pull.rebase true
        git config rebase.autoStash true
        
        # Try to push, if failed then pull and retry
        for i in {1..3}; do
          echo "Push attempt $i"
          if git push origin main; then
            echo "Push successful"
            break
          else
            echo "Push failed, pulling latest changes..."
            git pull origin main --no-edit || true
            if [ $i -eq 3 ]; then
              echo "Failed to push after 3 attempts"
              exit 1
            fi
          fi
        done